{"version":3,"sources":["components/QRScanner.js","App.js","reportWebVitals.js","theme.js","index.js"],"names":["QRScanner","useState","result","setResult","Box","className","sx","display","flexDirection","delay","onError","err","console","error","onScan","data","response","verifyPassURIOffline","violates","age","moment","diff","Date","credentialSubject","dob","format","valid","success","familyName","JSON","stringify","style","maxWidth","width","marginLeft","marginRight","defaultProps","App","path","element","Container","my","Typography","variant","component","gutterBottom","flexGrow","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","theme","createTheme","palette","primary","main","secondary","red","A400","ReactDOM","render","StrictMode","ThemeProvider","CssBaseline","enableColorScheme","document","getElementById"],"mappings":"8PAWaA,EAAY,WACrB,MAA4BC,mBAAS,IAArC,mBAAOC,EAAP,KAAeC,EAAf,KAmBA,OACI,eAACC,EAAA,EAAD,CAAKC,UAAU,UAAUC,GAAI,CAACC,QAAS,OAAQC,cAAe,UAA9D,UACI,cAAC,IAAD,CACIC,MAAO,IACPC,QAPQ,SAACC,GACjBC,QAAQC,MAAMF,IAONG,OAtBO,SAACC,GAChB,GAAIA,EAAM,CACN,IAAMC,EAAWC,+BAAqBF,GACtC,IAAKC,EAASE,SAAU,CACpB,IAAMC,EAAMC,MAASC,KAAKD,IAAO,IAAIE,KAAKN,EAASO,kBAAkBC,MAAMC,OAAO,cAAe,SAC3FvB,EAAS,CACXwB,MAAOV,EAASW,QAChBC,WAAYZ,EAASO,kBAAkBK,WACvCT,OAEJhB,EAAU0B,KAAKC,UAAU5B,OAazB6B,MAAO,CAACC,SAAU,QAASC,MAAO,OAAQC,WAAY,OAAQC,YAAa,UAE9EjC,MAQbF,EAAUoC,aAAe,G,qCCdVC,MA1Bf,WACI,OACI,cAAC,IAAD,UACI,cAAC,IAAD,UACI,cAAC,IAAD,CACIC,KAAK,IACLC,QACI,qBAAKlC,UAAU,MAAf,SACI,cAACmC,EAAA,EAAD,CAAWR,SAAS,KAApB,SACI,eAAC5B,EAAA,EAAD,CAAKE,GAAI,CAACmC,GAAI,EAAGlC,QAAS,OAAQC,cAAe,UAAjD,UACI,cAACkC,EAAA,EAAD,CAAYC,QAAQ,KAAKC,UAAU,KAAKC,cAAY,EAApD,sCAGA,qBAAKd,MAAO,CAACe,SAAU,GAAvB,SACI,cAAC,EAAD,oBCTzBC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,gBCWCQ,EAdDC,YAAY,CACtBC,QAAS,CACLC,QAAS,CACLC,KAAM,WAEVC,UAAW,CACPD,KAAM,WAEV/C,MAAO,CACH+C,KAAME,IAAIC,S,kBCJtBC,IAASC,OACL,cAAC,IAAMC,WAAP,UACI,eAACC,EAAA,EAAD,CAAeX,MAAOA,EAAtB,UACI,cAACY,EAAA,EAAD,CAAaC,mBAAiB,IAC9B,cAAC,EAAD,SAGRC,SAASC,eAAe,SAM5BxB,K","file":"static/js/main.c2c5078c.chunk.js","sourcesContent":["import {useState} from \"react\";\nimport QrReader from 'react-qr-reader';\nimport Box from \"@mui/material/Box\";\nimport {verifyPassURIOffline} from \"@vaxxnz/nzcp\";\nimport moment from \"moment\";\n\n/**\n * Will open camera to read scan qr code\n * @returns {JSX.Element}\n * @constructor\n */\nexport const QRScanner = () => {\n    const [result, setResult] = useState(\"\");\n\n    const handleScan = (data) => {\n        if (data) {\n            const response = verifyPassURIOffline(data);\n            if (!response.violates) {\n                const age = moment().diff(moment(new Date(response.credentialSubject.dob)).format(\"DD/MM/YYYY\"), 'years');\n                const result = {\n                    valid: response.success,\n                    familyName: response.credentialSubject.familyName,\n                    age,\n                }\n                setResult(JSON.stringify(result));\n            }\n        }\n    }\n    const handleError = (err) => {\n        console.error(err);\n    }\n    return (\n        <Box className=\"Scanner\" sx={{display: 'flex', flexDirection: 'column'}}>\n            <QrReader\n                delay={300}\n                onError={handleError}\n                onScan={handleScan}\n                style={{maxWidth: '600px', width: '100%', marginLeft: 'auto', marginRight: 'auto'}}\n            />\n            {result}\n        </Box>\n    );\n}\n\n\nQRScanner.propTypes = {};\n\nQRScanner.defaultProps = {};\n","import './App.css';\nimport {QRScanner} from \"./components/QRScanner\";\nimport Box from '@mui/material/Box';\nimport Container from '@mui/material/Container';\nimport Typography from '@mui/material/Typography';\nimport {HashRouter as Router, Route, Routes} from \"react-router-dom\";\n\nfunction App() {\n    return (\n        <Router>\n            <Routes>\n                <Route\n                    path=\"/\"\n                    element={\n                        <div className=\"App\">\n                            <Container maxWidth=\"md\">\n                                <Box sx={{my: 4, display: 'flex', flexDirection: 'column'}}>\n                                    <Typography variant=\"h4\" component=\"h1\" gutterBottom>\n                                        NZ Covid Passport Reader\n                                    </Typography>\n                                    <div style={{flexGrow: 2}}>\n                                        <QRScanner/>\n                                    </div>\n                                </Box>\n                            </Container>\n                        </div>\n                    }\n                />\n            </Routes>\n        </Router>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { red } from '@mui/material/colors';\nimport { createTheme } from '@mui/material/styles';\n\n// A custom theme for this app\nconst theme = createTheme({\n    palette: {\n        primary: {\n            main: '#556cd6',\n        },\n        secondary: {\n            main: '#19857b',\n        },\n        error: {\n            main: red.A400,\n        },\n    },\n});\n\nexport default theme;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport theme from \"./theme\";\nimport CssBaseline from \"@mui/material/CssBaseline\";\nimport {ThemeProvider} from '@mui/material/styles';\n\nReactDOM.render(\n    <React.StrictMode>\n        <ThemeProvider theme={theme}>\n            <CssBaseline enableColorScheme/>\n            <App/>\n        </ThemeProvider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}